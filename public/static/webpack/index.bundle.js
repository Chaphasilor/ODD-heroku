(()=>{"use strict";var __webpack_modules__={797:()=>{eval("\n;// CONCATENATED MODULE: ./src/api.js\nclass API {\r\n\r\n  constructor(url) {\r\n\r\n    this.url = url\r\n    this.activeCommands = []\r\n\r\n  }\r\n\r\n  parseMessage(message) {\r\n\r\n    // console.log(`message:`, message);\r\n    \r\n    try {\r\n      return JSON.parse(message.data)\r\n    } catch (err) {\r\n      throw new Error(`Couldn't parse message:`, err)\r\n    }\r\n\r\n  }\r\n\r\n  get connected() {\r\n    return this.socket != undefined && this.socket.readyState === WebSocket.OPEN\r\n  }\r\n\r\n  connectToServer() {\r\n    return new Promise((resolve, reject) => {\r\n\r\n      this.socket = new WebSocket(this.url)\r\n  \r\n      this.socket.onopen = () => {\r\n        if (this.socket.readyState === WebSocket.OPEN) {\r\n\r\n          console.log(`Socket opened!`)\r\n          \r\n          this.socket.onmessage = (message) => {\r\n            this.connectionId = JSON.parse(message.data)\r\n            return resolve()\r\n          }\r\n\r\n        } \r\n      }\r\n\r\n      this.socket.onerror = (error) => {\r\n        return reject(error)\r\n      }\r\n    \r\n    })\r\n  }\r\n\r\n  async send(data, responseHandler) {\r\n    \r\n    console.log(`this.connected:`, this.connected);\r\n    \r\n    if (!this.connected) {\r\n\r\n      try {\r\n        await this.connectToServer()\r\n      } catch (err) {\r\n        throw new Error(`Fatal: Failed to open websocket:`, err)\r\n      }\r\n      \r\n    }\r\n    \r\n    this.socket.send(JSON.stringify(data))\r\n\r\n    this.socket.onmessage = (message) => {\r\n      responseHandler(this.parseMessage(message))\r\n    }\r\n\r\n  }\r\n\r\n  async sendCommand(command, payload, responseHandler) {\r\n    \r\n    if (!this.connected) {\r\n\r\n      try {\r\n        await this.connectToServer()\r\n      } catch (err) {\r\n        throw new Error(`Fatal: Failed to open websocket:`, err)\r\n      }\r\n      \r\n    }\r\n    \r\n    this.socket.send(JSON.stringify({\r\n      type: `command`,\r\n      value: [\r\n        command,\r\n        ...payload\r\n      ]\r\n    }))\r\n    this.activeCommands.push({\r\n      name: command,\r\n      handler: responseHandler,\r\n    })\r\n\r\n    this.socket.onmessage = (message) => {\r\n\r\n      let parsed = this.parseMessage(message)\r\n\r\n      console.log(`parsed:`, parsed);\r\n  \r\n      let command = this.activeCommands.find(x => x.name === parsed.value[0])\r\n  \r\n      if (!command) {\r\n        throw new Error(`Command not found: ${command}`)\r\n      }\r\n  \r\n      switch (parsed.type) {\r\n        case `response`:\r\n            command.handler(parsed.value[1])\r\n          break;\r\n        case `commandEnd`:\r\n          this.activeCommands = this.activeCommands.filter(x => x !== command)\r\n          break;\r\n      \r\n        case `error`:\r\n          console.error(`Command '${parsed.value[0]}' threw an error:`, parsed.value[1])\r\n          //TODO add error handler\r\n          break;\r\n      \r\n        default:\r\n          break;\r\n      }\r\n    \r\n      \r\n    }\r\n\r\n  }\r\n  \r\n  async scanUrl(url) {\r\n\r\n    await this.sendCommand(`scan`,\r\n      [url],\r\n      (response) => {\r\n        console.log(`response:`, response);\r\n        document.querySelector(`#output`).innerText = JSON.stringify(response)\r\n      }\r\n    )\r\n    \r\n  }\r\n\r\n}\n;// CONCATENATED MODULE: ./src/index.js\n// import *any file or dependency (module)* that you want to bundle here\r\n\r\n\r\n\r\n// regular javascript goes below\r\n\r\nlet api\r\n\r\nlet scanButton = document.querySelector(`#scan-button`)\r\nlet urlInput = document.querySelector(`#url`)\r\n\r\nscanButton.addEventListener(`click`, performScan)\r\n\r\nfunction performScan() {\r\n\r\n  api.scanUrl(urlInput.value)\r\n  \r\n}\r\n\r\nwindow.onload = function() {\r\n\r\n  api = new API(`ws://127.0.0.1`)\r\n  api.connectToServer()\r\n  \r\n}\r\n\r\n// !! IMPORTANT: !!\r\n// Webpack doesn't automatically assing global variables to the window context when importing the bundle\r\n// Assign all variables, functions and classes, that you want to be accessible from html, to the window context\r\n\r\n\n\n//# sourceURL=webpack://tailwind-template/./src/index.js_+_1_modules?")}},__webpack_exports__={};__webpack_modules__[797]()})();